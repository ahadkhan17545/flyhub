name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: flyhub_test
          MYSQL_USER: flyhub_test
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, pdo, xml
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-php-

    - name: Install PHP dependencies
      run: composer install

    - name: Install Node.js dependencies
      run: yarn install --frozen-lockfile

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Create database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS flyhub_test;"
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "GRANT ALL PRIVILEGES ON flyhub_test.* TO 'flyhub_test'@'%';"
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "FLUSH PRIVILEGES;"

    - name: Configure environment for testing
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=flyhub_test" >> .env
        echo "DB_USERNAME=flyhub_test" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "CACHE_DRIVER=array" >> .env
        echo "SESSION_DRIVER=array" >> .env
        echo "QUEUE_DRIVER=sync" >> .env
        echo "APP_ENV=testing" >> .env

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Install Laravel Passport
      run: php artisan passport:install --force

    - name: Build frontend assets
      run: yarn build

    - name: Run Laravel tests
      run: |
        php artisan test --parallel
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: flyhub_test
        DB_USERNAME: flyhub_test
        DB_PASSWORD: password

    - name: Run Pest tests
      run: |
        ./vendor/bin/pest
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: flyhub_test
        DB_USERNAME: flyhub_test
        DB_PASSWORD: password

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress

    - name: Check code style
      run: |
        # Run basic syntax check
        find app/ tests/ -name "*.php" -exec php -l {} \;

        # Run Laravel Pint if available
        if [ -f "vendor/bin/pint" ]; then
          vendor/bin/pint --test
        fi

  frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install Node.js dependencies
      run: yarn install --frozen-lockfile

    - name: Build frontend assets
      run: yarn build

    - name: Run frontend tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q "test" package.json; then
          yarn test
        else
          echo "No test script found in package.json"
        fi
